function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}

function _defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
    }
}

function _createClass(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties(Constructor.prototype, protoProps);
    if (staticProps) _defineProperties(Constructor, staticProps);
    return Constructor;
}

function _slicedToArray(arr, i) {
    return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
}

function _arrayWithHoles(arr) {
    if (Array.isArray(arr)) return arr;
}

function _iterableToArrayLimit(arr, i) {
    var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];

    if (_i == null) return;
    var _arr = [];
    var _n = true;
    var _d = false;

    var _s, _e;

    try {
        for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
            _arr.push(_s.value);

            if (i && _arr.length === i) break;
        }
    } catch (err) {
        _d = true;
        _e = err;
    } finally {
        try {
            if (!_n && _i["return"] != null) _i["return"]();
        } finally {
            if (_d) throw _e;
        }
    }

    return _arr;
}

function _unsupportedIterableToArray(o, minLen) {
    if (!o) return;
    if (typeof o === "string") return _arrayLikeToArray(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor) n = o.constructor.name;
    if (n === "Map" || n === "Set") return Array.from(o);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
}

function _arrayLikeToArray(arr, len) {
    if (len == null || len > arr.length) len = arr.length;

    for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];

    return arr2;
}

function _nonIterableRest() {
    throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}

var _default = /*#__PURE__*/ function() {
    function _default(options) {
        _classCallCheck(this, _default);

        this.defaults = {
            name: 'load',
            loadingClass: 'is-loading',
            loadedClass: 'is-loaded',
            readyClass: 'is-ready',
            transitionsPrefix: 'is-',
            transitionsHistory: true,
            enterDelay: 0,
            exitDelay: 0,
            loadedDelay: 0,
            isLoaded: false,
            isEntered: false,
            isUrl: false,
            transitionContainer: null,
            popstateIgnore: false
        };
        Object.assign(this, this.defaults, options);
        this.options = options;
        this.namespace = 'modular';
        this.html = document.documentElement;
        this.href = window.location.href;
        this.container = 'data-' + this.name + '-container';
        this.subContainer = false;
        this.prevTransition = null;
        this.loadAttributes = ['src', 'srcset', 'style', 'href'];
        this.isInserted = false;
        this.isLoading = false;
        this.enterTimeout = false;
        this.controller = new AbortController();
        this.classContainer = this.html;
        this.isChrome = navigator.userAgent.indexOf("Chrome") != -1 ? true : false;
        this.init();
    }

    _createClass(_default, [{
        key: "init",
        value: function init() {
            var _this = this;

            window.addEventListener('popstate', function(e) {
                return _this.checkState(e);
            }, false);
            this.html.addEventListener('click', function(e) {
                return _this.checkClick(e);
            }, false);
            this.loadEls(document);
        }
    }, {
        key: "checkClick",
        value: function checkClick(e) {
            if (!e.ctrlKey && !e.metaKey) {
                var target = e.target;

                while (target && target !== document) {
                    if (target.matches('a') && target.getAttribute('download') == null) {
                        var href = target.getAttribute('href');

                        if (!href.startsWith('#') && !href.startsWith('mailto:') && !href.startsWith('tel:')) {
                            e.preventDefault();
                            this.reset();
                            this.getClickOptions(target);
                        }

                        break;
                    }

                    target = target.parentNode;
                }
            }
        }
    }, {
        key: "checkState",
        value: function checkState() {
            if (typeof this.popstateIgnore === 'string' && window.location.href.indexOf(this.popstateIgnore) > -1) {
                return;
            }

            this.reset();
            this.getStateOptions();
        }
    }, {
        key: "reset",
        value: function reset() {
            if (this.isLoading) {
                this.controller.abort();
                this.isLoading = false;
                this.controller = new AbortController();
            }

            window.clearTimeout(this.enterTimeout);

            if (this.isInserted) {
                this.removeContainer();
            }

            this.classContainer = this.html;
            Object.assign(this, this.defaults, this.options);
        }
    }, {
        key: "getClickOptions",
        value: function getClickOptions(link) {
            this.transition = link.getAttribute('data-' + this.name);
            this.isUrl = link.getAttribute('data-' + this.name + '-url');
            var href = link.getAttribute('href');
            var target = link.getAttribute('target');

            if (target == '_blank') {
                window.open(href, '_blank');
                return;
            }

            if (this.transition == 'false') {
                window.location = href;
                return;
            }

            this.setOptions(href, true);
        }
    }, {
        key: "getStateOptions",
        value: function getStateOptions() {
            if (this.transitionsHistory) {
                this.transition = history.state;
            } else {
                this.transition = false;
            }

            var href = window.location.href;
            this.setOptions(href);
        }
    }, {
        key: "goTo",
        value: function goTo(href, transition, isUrl) {
            this.reset();
            this.transition = transition;
            this.isUrl = isUrl;
            this.setOptions(href, true);
        }
    }, {
        key: "setOptions",
        value: function setOptions(href, push) {
            var container = '[' + this.container + ']';
            var oldContainer;

            if (this.transition && this.transition != 'true') {
                this.transitionContainer = '[' + this.container + '="' + this.transition + '"]';
                this.loadingClass = this.transitions[this.transition].loadingClass || this.loadingClass;
                this.loadedClass = this.transitions[this.transition].loadedClass || this.loadedClass;
                this.readyClass = this.transitions[this.transition].readyClass || this.readyClass;
                this.transitionsPrefix = this.transitions[this.transition].transitionsPrefix || this.transitionsPrefix;
                this.enterDelay = this.transitions[this.transition].enterDelay || this.enterDelay;
                this.exitDelay = this.transitions[this.transition].exitDelay || this.exitDelay;
                this.loadedDelay = this.transitions[this.transition].loadedDelay || this.loadedDelay;
                oldContainer = document.querySelector(this.transitionContainer);
            }

            if (oldContainer) {
                container = this.transitionContainer;
                this.oldContainer = oldContainer;
                this.classContainer = this.oldContainer.parentNode;

                if (!this.subContainer) {
                    history.replaceState(this.transition, null, this.href);
                }

                this.subContainer = true;
            } else {
                this.oldContainer = document.querySelector(container);

                if (this.subContainer) {
                    history.replaceState(this.prevTransition, null, this.href);
                }

                this.subContainer = false;
            }

            this.href = href;
            this.parentContainer = this.oldContainer.parentNode;

            if (this.isUrl === '' || this.isUrl != null && this.isUrl != 'false' && this.isUrl != false) {
                history.pushState(this.transition, null, href);
            } else {
                this.oldContainer.classList.add('is-old');
                this.setLoading();
                this.startEnterDelay();
                this.loadHref(href, container, push);
            }
        }
    }, {
        key: "setLoading",
        value: function setLoading() {
            this.classContainer.classList.remove(this.loadedClass, this.readyClass);
            this.classContainer.classList.add(this.loadingClass);
            this.classContainer.classList.remove(this.transitionsPrefix + this.prevTransition);

            if (this.transition) {
                this.classContainer.classList.add(this.transitionsPrefix + this.transition);
            }

            if (!this.subContainer) {
                this.prevTransition = this.transition;
            }

            var loadingEvent = new Event(this.namespace + 'loading');
            window.dispatchEvent(loadingEvent);
        }
    }, {
        key: "startEnterDelay",
        value: function startEnterDelay() {
            var _this2 = this;

            this.enterTimeout = window.setTimeout(function() {
                _this2.isEntered = true;

                if (_this2.isLoaded) {
                    _this2.transitionContainers();
                }
            }, this.enterDelay);
        }
    }, {
        key: "loadHref",
        value: function loadHref(href, container, push) {
            var _this3 = this;

            this.isLoading = true;
            var signal = this.controller.signal;
            fetch(href, {
                signal: signal
            }).then(function(response) {
                return response.text();
            }).then(function(data) {
                if (push) {
                    history.pushState(_this3.transition, null, href);
                }

                var parser = new DOMParser();
                _this3.data = parser.parseFromString(data, 'text/html');
                _this3.newContainer = _this3.data.querySelector(container);

                _this3.newContainer.classList.add('is-new');

                _this3.parentNewContainer = _this3.newContainer.parentNode;

                _this3.hideContainer();

                _this3.parentContainer.insertBefore(_this3.newContainer, _this3.oldContainer);

                _this3.isInserted = true;

                _this3.setSvgs();

                _this3.isLoaded = true;

                if (_this3.isEntered) {
                    _this3.transitionContainers();
                }

                _this3.loadEls(_this3.newContainer);

                _this3.isLoading = false;
            })["catch"](function(err) {
                window.location = href;
            });
        }
    }, {
        key: "transitionContainers",
        value: function transitionContainers() {
            var _this4 = this;

            this.setAttributes();
            this.showContainer();
            this.setLoaded();
            setTimeout(function() {
                _this4.removeContainer();

                _this4.setReady();
            }, this.exitDelay);
        }
    }, {
        key: "setSvgs",
        value: function setSvgs() {
            if (this.isChrome) {
                var svgs = this.newContainer.querySelectorAll('use');

                if (svgs.length) {
                    svgs.forEach(function(svg) {
                        var xhref = svg.getAttribute('xlink:href');

                        if (xhref) {
                            svg.parentNode.innerHTML = '<use xlink:href="' + xhref + '"></use>';
                        } else {
                            var href = svg.getAttribute('href');
                            if (href) svg.parentNode.innerHTML = '<use href="' + href + '"></use>';
                        }
                    });
                }
            }
        }
    }, {
        key: "setAttributes",
        value: function setAttributes() {
            var _this5 = this;

            var title = this.data.getElementsByTagName('title')[0];
            var newDesc = this.data.head.querySelector('meta[name="description"]');
            var oldDesc = document.head.querySelector('meta[name="description"]');
            var container;
            var newContainer;

            if (this.subContainer) {
                newContainer = this.parentNewContainer;
                container = document.querySelector(this.transitionContainer).parentNode;
            } else {
                newContainer = this.data.querySelector('html');
                container = document.querySelector('html');
            }

            var datas = Object.assign({}, newContainer.dataset);
            if (title) document.title = title.innerText;
            if (oldDesc && newDesc) oldDesc.setAttribute('content', newDesc.getAttribute('content'));

            if (datas) {
                Object.entries(datas).forEach(function(_ref) {
                    var _ref2 = _slicedToArray(_ref, 2),
                        key = _ref2[0],
                        val = _ref2[1];

                    container.setAttribute('data-' + _this5.toDash(key), val);
                });
            }
        }
    }, {
        key: "toDash",
        value: function toDash(str) {
            return str.split(/(?=[A-Z])/).join('-').toLowerCase();
        }
    }, {
        key: "hideContainer",
        value: function hideContainer() {
            this.newContainer.style.visibility = 'hidden';
            this.newContainer.style.height = 0;
            this.newContainer.style.overflow = 'hidden';
        }
    }, {
        key: "showContainer",
        value: function showContainer() {
            this.newContainer.style.visibility = '';
            this.newContainer.style.height = '';
            this.newContainer.style.overflow = '';
        }
    }, {
        key: "loadEls",
        value: function loadEls(container) {
            var _this6 = this;

            var promises = [];
            this.loadAttributes.forEach(function(attr) {
                var data = 'data-' + _this6.name + '-' + attr;
                var els = container.querySelectorAll('[' + data + ']');

                if (els.length) {
                    els.forEach(function(el) {
                        var elData = el.getAttribute(data);
                        el.setAttribute(attr, elData);

                        if (attr == 'src' || attr == 'srcset') {
                            var promise = new Promise(function(resolve) {
                                el.onload = function() {
                                    return resolve(el);
                                };
                            });
                            promises.push(promise);
                        }
                    });
                }
            });
            Promise.all(promises).then(function(val) {
                var imagesEvent = new Event(_this6.namespace + 'images');
                window.dispatchEvent(imagesEvent);
            });
        }
    }, {
        key: "setLoaded",
        value: function setLoaded() {
            var _this7 = this;

            this.classContainer.classList.remove(this.loadingClass);
            setTimeout(function() {
                _this7.classContainer.classList.add(_this7.loadedClass);
            }, this.loadedDelay);
            var loadedEvent = new Event(this.namespace + 'loaded');
            window.dispatchEvent(loadedEvent);
        }
    }, {
        key: "removeContainer",
        value: function removeContainer() {
            this.parentContainer.removeChild(this.oldContainer);
            this.newContainer.classList.remove('is-new');
            this.isInserted = false;
        }
    }, {
        key: "setReady",
        value: function setReady() {
            this.classContainer.classList.add(this.readyClass);
            var readyEvent = new Event(this.namespace + 'ready');
            window.dispatchEvent(readyEvent);
        }
    }, {
        key: "on",
        value: function on(event, func) {
            var _this8 = this;

            window.addEventListener(this.namespace + event, function() {
                switch (event) {
                    case 'loading':
                        return func(_this8.transition, _this8.oldContainer);

                    case 'loaded':
                        return func(_this8.transition, _this8.oldContainer, _this8.newContainer);

                    case 'ready':
                        return func(_this8.transition, _this8.newContainer);

                    default:
                        return func();
                }
            }, false);
        }
    }]);

    return _default;
}();

export default _default;